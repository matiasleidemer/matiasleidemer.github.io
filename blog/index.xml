<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Matias Leidemer&#39;s Blog</title>
    <link>http://www.leidemer.com/blog/</link>
    <description>Recent content in Blog on Matias Leidemer&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 14 Mar 2017 21:10:00 -0300</lastBuildDate>
    
	<atom:link href="http://www.leidemer.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>99 Bottles of Beer (Meta Review)</title>
      <link>http://www.leidemer.com/blog/99-bottles-of-beer-meta-review/</link>
      <pubDate>Tue, 14 Mar 2017 21:10:00 -0300</pubDate>
      
      <guid>http://www.leidemer.com/blog/99-bottles-of-beer-meta-review/</guid>
      <description>I’ve just finished reading 99 Bottles of OOP by Sandi Metz, and, just like her other book (which I reviewed in Portuguese), it’s a very good read.
If you’re into Object-Oriented Programming and you don’t know Sandi, you’re doing it wrong. She’s a very famous OO advocate and has given a lot of talks on the subject. The one at the Railsconf 2014 is one of my favorites.
Now, back to the 99 Bottles.</description>
    </item>
    
    <item>
      <title>Be Careful With Method Caching</title>
      <link>http://www.leidemer.com/blog/be-careful-with-method-caching/</link>
      <pubDate>Wed, 01 Mar 2017 22:44:48 -0300</pubDate>
      
      <guid>http://www.leidemer.com/blog/be-careful-with-method-caching/</guid>
      <description>Today I spent a good amount of time trying to understand why a specific spec was failing. It was a little bit like this (I changed classes/method names for the sake of the example):
require &#39;spec_helper&#39; RSpec.describe Blog do describe &#39;#delete_oldest_post&#39; do it &amp;quot;deletes the blog&#39;s oldest post&amp;quot; do blog = FactoryGirl.create(:blog) oldest_post = FactoryGirl.create(:post, created_at: Time.zone.now - 1.year) blog.posts &amp;lt;&amp;lt; oldest_post expect { blog.delete_oldest_post } .to change { blog.oldest_post } .</description>
    </item>
    
    <item>
      <title>Easy Copying File&#39;s Path Using Vim</title>
      <link>http://www.leidemer.com/blog/easy-copying-files-path-using-vim/</link>
      <pubDate>Wed, 22 Feb 2017 11:37:48 -0300</pubDate>
      
      <guid>http://www.leidemer.com/blog/easy-copying-files-path-using-vim/</guid>
      <description>Sometimes I need to copy the current file’s relative path to the main register (Cmd+C). Luckily Vim has a nice command that returns it:
expand(&amp;quot;%&amp;quot;) &amp;quot; =&amp;gt; current_project/path/to/file.rb  It also has a command that returns the current line your cursor is at: line(&amp;quot;.&amp;quot;), and of course you can use both commands at the same time:
&amp;quot; use . to concatenate things expand(&amp;quot;%&amp;quot;) . &amp;quot;:&amp;quot; . line(&amp;quot;.&amp;quot;) &amp;quot; =&amp;gt; current_project/path/to/file.rb:42  Alright, cool, that helps, but now what?</description>
    </item>
    
    <item>
      <title>Write something everyday</title>
      <link>http://www.leidemer.com/blog/write-something-everyday/</link>
      <pubDate>Mon, 20 Feb 2017 20:40:55 -0300</pubDate>
      
      <guid>http://www.leidemer.com/blog/write-something-everyday/</guid>
      <description>After watching Abstract’s first episode (which I really recommend) there was something stuck in my head. In the episode Christoph says that he creates something everyday. It doesn’t matter if it’s good or bad, if it will be used later or not. But he needs to do so in order to make things happen, in order to create something.
When I was very young I thought I was going to be a designer.</description>
    </item>
    
    <item>
      <title>Farewell, Twitter</title>
      <link>http://www.leidemer.com/blog/farewell-twitter/</link>
      <pubDate>Mon, 28 Nov 2016 21:07:55 -0200</pubDate>
      
      <guid>http://www.leidemer.com/blog/farewell-twitter/</guid>
      <description>It was 2007 when I first used Twitter. No one really cared, and nobody that I knew was using. I remember my friends mocking at me, saying it was just another hipster thing I came up with. For my surprise, Twitter grew way more than I expected, becoming one of the biggest social networks of all time.
I use Twitter a lot. It is my main source of resourceful links and news.</description>
    </item>
    
    <item>
      <title>Trying to get back on tract (redux)</title>
      <link>http://www.leidemer.com/blog/trying-to-get-back-on-tract-redux/</link>
      <pubDate>Mon, 19 Sep 2016 21:15:57 -0300</pubDate>
      
      <guid>http://www.leidemer.com/blog/trying-to-get-back-on-tract-redux/</guid>
      <description>It has been a while since I blogged. For some reason I just can&amp;rsquo;t find the time, or motivation, to start writing something useful. More than once it feels like I have nothing to say at all.
I found a lot of excuses to not write. My favorite is not being able to find a good blog engine. I&amp;rsquo;ve been searching for quite some time for the perfect one.
 Jekyll is awesome, but I don&amp;rsquo;t wanna spend time tailoring it, but I also don&amp;rsquo;t like any layout I found out there; The same happens for Hexo; Wordpress never sounded appealing to me; Medium seems like a good option, but for some reason I don&amp;rsquo;t feel like writing code stuff there;  But I finally came across Gohugo and its beautiful cocoa theme.</description>
    </item>
    
    <item>
      <title>Implementando Lazy Initialization</title>
      <link>http://www.leidemer.com/blog/implementando-lazy-initialization/</link>
      <pubDate>Sat, 27 Sep 2014 21:13:48 -0300</pubDate>
      
      <guid>http://www.leidemer.com/blog/implementando-lazy-initialization/</guid>
      <description>In computer programming, lazy initialization is the tactic of delaying the creation of an object, the calculation of a value, or some other expensive process until the first time it is needed. Wikipédia.
Inspirado pelo ótimo 20,000 Leagues Under ActiveRecord, decidi tentar implementar uma classe que utiliza a tática de lazy initialization para postergar um processamento, teoricamente, custoso. A idéia, tal qual acontece com o ActiveRecord (explicado no post linkado) é ir adicionando condições à um objeto para, posteriormente, executar uma tarefa.</description>
    </item>
    
    <item>
      <title>Resolvendo Problemas com Acentos em Ruby</title>
      <link>http://www.leidemer.com/blog/resolvendo-problemas-com-acentos-em-ruby/</link>
      <pubDate>Tue, 23 Sep 2014 21:11:24 -0300</pubDate>
      
      <guid>http://www.leidemer.com/blog/resolvendo-problemas-com-acentos-em-ruby/</guid>
      <description>Lembro que a um tempo atrás eu fiz uma clean install do Mavericks no meu Macbook e tive alguns problemas chatos quanto acentuação em ruby. Sempre que eu tentava utilizar ç ou ã, por exemplo, tinha como retorno um caracter estranho ou mesmo uma quebra de linha.
Apesar de parecer, não era o caso de colocar o encoding: utf-8 no header do arquivo, já que o problema acontecia mesmo nas versões &amp;gt; 1.</description>
    </item>
    
    <item>
      <title>Review Practical Object-Oriented Design in Ruby</title>
      <link>http://www.leidemer.com/blog/review-practical-object-oriented-design-in-ruby/</link>
      <pubDate>Mon, 15 Sep 2014 21:02:55 -0300</pubDate>
      
      <guid>http://www.leidemer.com/blog/review-practical-object-oriented-design-in-ruby/</guid>
      <description>Não vou começar esse post dizendo que adoro ler livros técnicos. Eu não gosto. Não consigo me lembrar de outros livros da mesma categoria que consegui ler até o fim.
Existe alguma coisa sobre o POODR que o deixa diferente.
Sandi Metz fez um trabalho impecável aqui. A maneira como ela conduz a narrativa, como ela te faz pensar sobre os conceitos, é impressionante. Conceitos, estes, que você achava que sabia&amp;hellip;</description>
    </item>
    
    <item>
      <title>Se Divertindo com o Método Transpose</title>
      <link>http://www.leidemer.com/blog/se-divertindo-com-o-m%C3%A9todo-transpose/</link>
      <pubDate>Wed, 10 Sep 2014 19:52:41 -0300</pubDate>
      
      <guid>http://www.leidemer.com/blog/se-divertindo-com-o-m%C3%A9todo-transpose/</guid>
      <description>Embora eu tenha usado poucas vezes, o método Array#transpose do ruby é muito interessante. Dependendo da sua forma de uso, pode apresentar soluções muito poderosas.
names = %w(matias jose mateus) # =&amp;gt; [&amp;quot;matias&amp;quot;, &amp;quot;jose&amp;quot;, &amp;quot;mateus&amp;quot;] last_names = %w(leidemer gomes lorandi) # =&amp;gt; [&amp;quot;leidemer&amp;quot;, &amp;quot;gomes&amp;quot;, &amp;quot;lorandi&amp;quot;] [names, last_names].transpose # =&amp;gt; [[&amp;quot;matias&amp;quot;, &amp;quot;leidemer&amp;quot;], [&amp;quot;jose&amp;quot;, &amp;quot;gomes&amp;quot;], [&amp;quot;mateus&amp;quot;, &amp;quot;lorandi&amp;quot;]]  Neste exemplo, o método junta os primeiros nomes definidos em names junto com os sobrenomes definidos em last_names, baseado nos índices de cada nome/sobrenome.</description>
    </item>
    
    <item>
      <title>Instalando Postgresql no Mavericks</title>
      <link>http://www.leidemer.com/blog/instalando-postgresql-no-mavericks/</link>
      <pubDate>Tue, 31 Dec 2013 19:46:08 -0300</pubDate>
      
      <guid>http://www.leidemer.com/blog/instalando-postgresql-no-mavericks/</guid>
      <description>Aproveitando o fim de ano, decidi realizar uma fresh install do Mavericks no meu Macbook.
Enquanto instalava minhas ferramentas de trabalho, tive um pouco de dificuldade para instalar o PostgreSQL. Não lembro exatamente como havia feito anteriormente, por isso decidi escrever aqui como foi o processo dessa vez.
Homebrew Bom, (quase) tudo que instalo no Mac, faço através do homebrew. Se você ainda não usa, deveria.
A instalação do homebrew deve ocorrer normalmente, sua página contém bastante informação caso ocorra algum problema.</description>
    </item>
    
  </channel>
</rss>